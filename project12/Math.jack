// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

        static Array twoToThe;
        static int twoqy; 
        /** Initializes the library. */
        function void init() {
            let twoqy = 0;
            let twoToThe = Array.new(16);
            let twoToThe[0] = 1;
            let twoToThe[1] = 2;
            let twoToThe[2] = 4;
            let twoToThe[3] = 8;
            let twoToThe[4] = 16;
            let twoToThe[5] = 32;
            let twoToThe[6] = 64;
            let twoToThe[7] = 128;
            let twoToThe[8] = 256;
            let twoToThe[9] = 512;
            let twoToThe[10] = 1024;
            let twoToThe[11] = 2048;
            let twoToThe[12] = 4096;
            let twoToThe[13] = 8192;
            let twoToThe[14] = 16384;
            let twoToThe[15] = 16384 + 16384;
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0)
            {
                return -x;
            }
                return x;
        }

        function boolean bit(int x, int i) {

            if (x & twoToThe[i]){
                return true;
            }
            return false;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sum; 
            var int shiftedX;
            var int i;
            let i = 0;
            let sum = 0;
            let shiftedX = x;

            while ( i < 16) {
                
                if (Math.bit(y,i) = true) {
                    let sum = sum + shiftedX;
                }
                let shiftedX = shiftedX + shiftedX;
                let i = i + 1; 
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */

        function int positiveDivide(int x, int y){
            var int q;
            let q = 0; 

            if ( x < y ) { return 0; }
            if ( ~( y > 0)) { return 0; }

            let q = Math.positiveDivide(x,(^y));
            if ((x-twoqy)<y)
            {
                return (^q);
            }

            else
            {
                let twoqy = twoqy + y; 
                return ((^q)+1);
            }
        }

        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            let twoqy = 0; 
            if (( x < 0 ) & ( y < 0 ))
            {
                return Math.positiveDivide(-x,-y);
            }

            if (( x < 0 ) & ( y > 0 ))
            {
                return -(Math.positiveDivide(-x,y));
            }

            if (( x > 0 ) & ( y < 0 ))
            {
                return -(Math.positiveDivide(x,-y));
            }
            return Math.positiveDivide(x,y);

        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            var int y; 
            var int j; 
            var int first;
            var int squre_y; 
            var int two_y;
            var int y_calc;  
            let squre_y = 0;
            let two_y = 0; 
            let y = 0; 
            let j = 7;  
            while ( ~(j<0) )
            {
                let y_calc = squre_y + two_y + twoToThe[(^j)];
                if(~(y_calc > x) & (y_calc > 0))
                {
                    let y = y + twoToThe[j];
                    let squre_y = squre_y + two_y + twoToThe[(^j)];
                    let two_y = (#two_y) + twoToThe[^j];
                }
                else
                {
                    let two_y = (#two_y);
                }
                let j = j - 1; 
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a < b)
            {
                return b;
            }
            return a;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b)
            {
                return a;
            }
            return b;
        }
}
