// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int start; 


    /** Initializes the class. */                  
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let start = 2048; 
        let ram[start] = 14335; //the length of the heap
        let ram[start+1] = 0;   //the next freelist
        return; 
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int runner,last; 
        let runner = start;
        let last = runner; 

        while(~(ram[runner] > (size + 2)) & (~(ram[runner+1] = null))){

            let last = runner;
            let runner = ram[runner+1];
        } 

        if(~(ram[runner] < (size + 3))){
            let ram[runner + size + 1] = ram[runner] - (size + 1);
            let ram[runner + size + 2] = ram [runner + 1];
            
            if(runner = start)
            {
                let start = runner + size + 1;
            } 

            else { 
                let ram[last + 1] = runner + size + 1; 
            }

            let ram[runner] = size + 1;
            return runner + 1; 

        }
        return (-1);
    }
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
       // var int runner; 
        //let runner = start;
        let ram[o] = start;
        let start = o-1;

      //  while(~(ram[runner + 1] = null))
      //  {
      //      let runner = ram[runner +1]; 
      //  } 

       // let ram[runner + 1] = o - 1;
       // let ram[o] = null;

        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.

        var int size,i,max;
        let max = -32767; 
        let i = 0;  
        let size = ram[o-1]; 
        while(i<size)
        {
            if(ram[o + i] > max){
                let max = ram[o + i];
            }
        }

        return max; 
    }
}










