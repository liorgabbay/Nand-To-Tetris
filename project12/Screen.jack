// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        /** Initializes the Screen. */
        static Array screen;
        static boolean color;

        function void init() {
            let screen = 16384;
            let color = true;
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int runner;
            let runner = 0;

            while ( runner < 8192 ) { // 32 byts in row and 256 rows - 32 * 256 = 8192
                let screen[runner] = 0;
                let runner = runner + 1;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.

            var int mod, address, drawer, runner, memVal;

            let mod  = x & 15;
            let address = 16384 + (^(^(^(^(^y))))) + (#(#(#(#x))));
            let drawer = 1;
            let runner = 1;
            let memVal = Memory.peek(address);

            while (~(runner > mod)) {
                let drawer = (^drawer);
                let runner = runner + 1;
            }
            if (color) {
                let memVal = memVal | drawer;
            }
            else {
                let memVal = memVal & (~drawer);
            }
            

            do Memory.poke(address, memVal);

            return;

        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            
            if (y1 = y2) { //HORIZON
                if (x1 < x2) {
                    do Screen.drawLineHoriz(x1,y1,x2,y2);
                    return;
                }
                else {
                    do Screen.drawLineHoriz(x2,y2,x1,y1);
                    return;
                }
            }

            if (x1 < x2) {

                if (y1 < y2) { //south-east
                    do Screen.drawLineSE(x1,y1,x2,y2);
                    return;
                }
                else { // north east
                    do Screen.drawLineNE(x1,y1,x2,y2);
                    return;
                }
            }
            else {
                if (y1 < y2) { //south west
                    do Screen.drawLineNE(x2,y2,x1,y1);
                    return;
                }
                else { // north west
                    do Screen.drawLineSE(x2,y2,x1,y1);
                    return;
                }
            }
        }

        //function void drawLineHoriz(int x1, int y1, int x2, int y2) { //TODO : change this implementation 
          //  var int a, x , dx;
           // let x = x1;
           // let dx = x2 - x1;
          //  let a = 0;
        
          //  while (~(a> dx)) {
          //      do Screen.drawPixel(x+a,y1);
         //       let a = a +1;
         //   }
         //   return;
        //}
        
        function int get_end(int x)
        {
            if (x = 0)
            {
                return 0;
            }

            return (x - (x & 15));
        }

        function int get_start(int x)
        {
            if (x = 0)
            {
                return 0;
            }

            return (x + (16 - (x & 15)));
        }

         function void drawLineHoriz(int x1, int y1, int x2, int y2) { //TODO : change this implementation 
            var int i, addr, new_x1 ,new_x2;
            let new_x1 = Screen.get_start(x1);
            let new_x2 = Screen.get_end(x2);
            if ((x2 - x1) < 16)
            {
                let i = x1;
                while ( i < (x2 + 1))
                {
                    do Screen.drawPixel(i,y1);
                    let i = i + 1;
                }
                return;
            }

            let i = x1; 
            while (i < new_x1)
            {
                do Screen.drawPixel(i,y1);
                let i = i + 1;
            }

            let i = new_x1; 
            while(i < new_x2)
            {
                let addr = (16384 + (32*y1) + (i/16));
                do Memory.poke(addr, color);
                let i = i + 16;
            }

            let i = new_x2; 
            while (i < x2)
            {
                do Screen.drawPixel(i,y1);
                let i = i + 1;
            }
            return;
        }


        function void drawLineNE(int x1, int y1, int x2, int y2) {
            var int a, b, x, y, dx, dy, diff;

            let x = x1;
            let y = y1; 
            let a = 0; 
            let b = 0; 
            let diff = 0;

            let dx = x2 - x1;
            let dy = y1 - y2;


            while ((~(a > dx)) & (~(b > dy))) {

                do Screen.drawPixel(x+a,y-b);

                if (diff < 0) {
                    let a = a+1;
                    let diff = diff+dy;
                }
                else {
                    let b = b+1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        function void drawLineSE(int x1, int y1, int x2, int y2) {
            var int a, b, x, y, dx, dy, diff;

            let x = x1;
            let y = y1; 
            let a = 0; 
            let b = 0; 
            let diff = 0;
            let dx = x2-x1;
            let dy = y2-y1;



            while ((~(a > dx)) & (~(b > dy))) {
                do Screen.drawPixel(x+a,y+b);
                if (diff < 0) {
                    let a = a+1;
                    let diff = diff+dy;
                }
                else {
                    let b = b+1;
                    let diff = diff - dx;
                }
            }

            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            var int runner;

            let runner = 0;

            while ( (y1 + runner) < y2) {
                do Screen.drawLine(x1, y1+runner, x2, y1+runner); // upper line
                let runner = runner + 1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)

            var int dy, halfWidth;
            let dy = (-r);

            while (~(dy > r)) {
                let halfWidth = Math.sqrt((r*r) - (dy*dy));
                do Screen.drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy);
                let dy = dy + 1;
            }

            return;
        }
}