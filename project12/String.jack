// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
     field Array str;
     field int index;

    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let index = 0; 
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c; 
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[index] = c; 
        let index = index + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let index = index - 1; 
        return;
    }

    function int int_char(char c)
    {
        if (c = 48){return 0;}
        if (c = 49){return 1;}
        if (c = 50){return 2;}
        if (c = 51){return 3;}
        if (c = 52){return 4;}
        if (c = 53){return 5;}
        if (c = 54){return 6;}
        if (c = 55){return 7;}
        if (c = 56){return 8;}
        return 9;
    }

    
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val,i ,d;
        var boolean minusFlag;
        let minusFlag = false;
        let val = 0;
        let i = 0;

        if (str[i] = 45) {
            let minusFlag = true;
            let i = i + 1;
        }
        while((i < index) & (str[i] > 47) & (str[i] < 58) )
        {
            let d = String.int_char(charAt(i));
            let val = (val*10)+d;
            let i = i + 1;
        }

        if (minusFlag){
            let val = -val;
        }
        
        return val;
    }

    function char char_int(int c)
    {
        if (c = 0){return 48;}
        if (c = 1){return 49;}
        if (c = 2){return 50;}
        if (c = 3){return 51;}
        if (c = 4){return 52;}
        if (c = 5){return 53;}
        if (c = 6){return 54;}
        if (c = 7){return 55;}
        if (c = 8){return 56;}
        return 57;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)

        let index = 0;
        if (val < 0)
        {
            do appendChar(45);
            let val = -val;
        }

        do int2String(val);
        return;
    }


    method String int2String(int num) {
        var int lastDigit;
        var char c;
        let lastDigit = num - ((num/10) * 10);
        let c = String.char_int(lastDigit);
        if (num < 10) {
            do appendChar(c);
            return this;
        }
        do int2String(num/10);
        do appendChar(c);
        return this;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}